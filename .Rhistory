## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("Getting cached data")
return(m)
}
data <-x$get()
m<-solve(data, ...)%*%data
x$setmean(m)
m
}
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c) %*%c
cacheSolve(c)
class(c)
makeCacheMatrix(c)
cachesolve(c)
cacheSolve(c)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:5)
t<-makeVector(1:5)
cachemean(t)
cachemean(t)
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("Getting cached data")
return(m)
}
data <-x$get()
m<-solve(data, ...)
x$setmean(m)
m
}
makeCacheMatrix(matrix(1:6,3,2,byrow=T))
w<-makeCacheMatrix(matrix(1:6,3,2,byrow=T))
cacheSolve(w)
w<-makeCacheMatrix(matrix(1:4,2,2,byrow=T))
cacheSolve(w)
cacheSolve(w)
w
w$get
w$get()
w$set()
w$getinverse()
w$get()
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("Getting cached data")
return(m)
}
data <-x$get()
m<-solve(data)
x$setmean(m)
m
}
q<-makeCacheMatrix(matrix(1:4,2,2))
q
q$get()
cacheSolve(q)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("Getting cached data")
return(m)
}
data <-x$get()
m<-solve(data)
x$setmean(m)
m
}
cacheSolve(q)
traceback()
solve(q)
calss(q)
class(q)
class(Q$get())
class(q$get())
solve(q$get())
q$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("Getting cached data")
return(m)
}
data <-x$get()
m<-solve(data)
x$setinverse(m)
m
}
cacheSolve(q)
cacheSolve(q)
